#include "/Engine/Private/Common.ush"

void MainVS(
        in float4 InPosition : ATTRIBUTE0,
        out float4 Output : SV_POSITION
    )
{
    Output = InPosition;
}

    // 简单的纯色像素着色器
float4 MyColor;
uint InNumTextures; // Number of layers to merge into the destination texture
Texture2D MyTexture;
SamplerState MyTextureSampler;
Texture2DArray<float4> InMergeTextures; // Source texture for each individual edit layer (effective size == InNumEditLayers)
float4 MainPS(in float4 SVPos : SV_POSITION) : SV_Target0
{
    const float2 CurrentUV = SVPos.xy / float2(256, 256);
    const float Size = 2.0f;
    const float Strip = 1.0f / Size;
    const int2 Rel = (CurrentUV / Strip); 
    const int Index = Rel.y + Rel.x * Size;
    
    const float2 Coor = fmod(CurrentUV, Strip) ;
    int4 LoadCoordinates = int4(Coor, 0, 0);
	return InMergeTextures.Load(LoadCoordinates);
	//return float4(Coor, 0, 1);
	//return MyTexture.Sample(MyTextureSampler, SVPos.xy / float2(256, 256)); 
	//return float4(SVPos.xy / float2(256,256), 0, 1);
	//return SVPos;
	//return MyTexture;
	
}